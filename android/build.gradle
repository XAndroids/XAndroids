apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'
//增加task依赖插件
apply plugin: "com.dorongold.task-tree"
//应用ASM的插件
apply plugin: 'com.android.xknowledge2'


import groovy.xml.MarkupBuilder
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

final def log = project.logger
final def variants = project.android.applicationVariants

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.9'
        classpath 'org.aspectj:aspectjweaver:1.8.9'
    }
}
repositories {
    mavenCentral()
}

variants.all {
        //正式环境要删除掉这一句
    variant ->
        if (!variant.buildType.isDebuggable()) {
            log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
            return;
        }

        JavaCompile javaCompile = variant.javaCompile
        javaCompile.doLast {
            String[] args = ["-showWeaveInfo",
                             "-1.8",
                             "-inpath", javaCompile.destinationDir.toString(),
                             "-aspectpath", javaCompile.classpath.asPath,
                             "-d", javaCompile.destinationDir.toString(),
                             "-classpath", javaCompile.classpath.asPath,
                             "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
            log.debug "ajc args: " + Arrays.toString(args)

            MessageHandler handler = new MessageHandler(true);
            new Main().run(args, handler);
            for (IMessage message : handler.getMessages(null, true)) {
                switch (message.getKind()) {
                    case IMessage.ABORT:
                    case IMessage.ERROR:
                    case IMessage.FAIL:
                        log.error message.message, message.thrown
                        break;
                    case IMessage.WARNING:
                        log.warn message.message, message.thrown
                        break;
                    case IMessage.INFO:
                        log.info message.message, message.thrown
                        break;
                    case IMessage.DEBUG:
                        log.debug message.message, message.thrown
                        break;
                }
            }
        }
}

android {
    compileSdkVersion COMPILE_SDK_VERSION.toInteger()
    defaultConfig {
        applicationId "com.android.xknowledge"
        minSdkVersion MIN_SDK_VERSION.toInteger()
        targetSdkVersion TARGET_SDK_VERSION.toInteger()
        versionCode VERSION_CODE.toInteger()
        versionName VERSION_NAME
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //用于配置Cmake构建参数
        //配置我们自己的C/C++代码要编译哪些CPU架构
        externalNativeBuild {
            cmake {
                //将参数传递给变量
                //arguments "-DVAR_NAME=ARGUMENT".
                arguments ""
                //为C编译器设置可选标志
                //cFlags "-D_EXAMPLE_C_FLAG1", "-D_EXAMPLE_C_FLAG2"
                cFlags ""
                //为C++编译器设置可选标志
                //cppFlags "-D__STDC_FORMAT_MACROS"s
                cppFlags ""
                abiFilters "armeabi-v7a", "x86"
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false
            jniDebuggable false
        }
        debug {
            debuggable true
            minifyEnabled false
            jniDebuggable false
        }
    }

    flavorDimensions "version"
    productFlavors {
        demo {
            dimension "version"
            //配置打包时会把哪些CPU架构打包进去
            ndk {
                abiFilters "x86", "armeabi-v7a"
            }
            //为demo flavor指定要构建和打包的本地库
            externalNativeBuild {
                cmake {
                    targets "native-lib"
                }
            }
        }
        pad {
            dimension "version"
            ndk {
                abiFilters "armeabi-v7a"
            }
            externalNativeBuild {
                cmake {
                    targets "native-lib"
                }
            }
        }
    }

    //Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target 1.6
    //参考：https://stackoverflow.com/questions/56748334/how-to-get-viewmodel-by-viewmodels-fragment-ktx
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    //Robolectric框架构建配置
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    //ndk构建文件配置
    externalNativeBuild {
        //path指定CMakeList.txt文件所在路径，version指定CMake版本
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version "3.10.2"
        }
    }
}

//Gradle依赖相关API
//参考：https://coding.imooc.com/lesson/206.html#mid=13302
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':router')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.appcompat:appcompat:1.2.0-alpha02'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.0.0-rc01'

    implementation 'org.greenrobot:eventbus:3.1.1'
    //Viewmodel相关
    implementation 'androidx.activity:activity-ktx:1.1.0'
    implementation 'androidx.fragment:fragment-ktx:1.2.0'
    //Paging相关
    implementation 'androidx.paging:paging-runtime:2.1.0'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'androidx.room:room-runtime:2.2.3'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'androidx.paging:paging-runtime-ktx:2.1.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.work:work-runtime:2.3.4'
    annotationProcessor project(path: ':annotation_compiler')
    implementation project(path: ':annotation')
    if (!IS_APPLICATION.toBoolean()) {
        implementation project(path: ':module1_apk')
        implementation project(path: ':module2_apk')
    }
    kapt 'com.github.bumptech.glide:compiler:4.9.0'
    //Navigation
    implementation 'androidx.navigation:navigation-fragment:2.2.1'
    implementation 'androidx.navigation:navigation-ui:2.2.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.1'
    //rxbinding
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation "io.reactivex.rxjava2:rxjava:2.2.10"
    implementation "com.jakewharton.rxbinding2:rxbinding:2.0.0"
    implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:2.0.0"
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.5@aar'

    implementation 'org.aspectj:aspectjrt:1.8.9'
    implementation project(':reactnative')
    implementation project(path: ':plugin_core')
    annotationProcessor 'androidx.room:room-compiler:2.2.3'
    implementation "com.android.support:support-compat:28.0.0"
    kapt 'org.greenrobot:eventbus-annotation-processor:3.1.1'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation this.libExtJunit
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha02'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0-alpha02'

    //Robolectric框架构建配置
    testImplementation 'org.robolectric:robolectric:4.3'

    //leakcanary相关
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'

    //lifecycle相关
    def lifecycle_version = "2.2.0"
    def arch_version = "2.1.0"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    // Annotation processor
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - helpers for implementing LifecycleOwner in a Service
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"
    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$arch_version"
}

kapt {
    arguments {
        arg('eventBusIndex', 'com.android.xknowledge.MyEventBusIndex')
    }
}

apply from: 'customplugin1.gradle'
// 引入buildSrc里的自定义插件
apply plugin: 'com.android.xknowledge'
//针对CustomPlugin2的自定义属性进行配置
//参考：https://www.cnblogs.com/davenkin/p/3422009.html
CustomPlugin2 {
    timeFormat = 'HH:mm:ss.SSS'
    dateFormat = 'MM/dd/yyyy'
}

// 引入comtomplugin3独立项目自定义插件
apply plugin: 'com.android.xknowledge1'

//gradle生命周期的监听
//参考：https://coding.imooc.com/lesson/206.html#mid=13281
println "android 配置阶段执行中...."

//在项目的build.gradle中调用this.gradle，调用的是Project对象的getGradle()方法
this.gradle.buildStarted {
    println "构建开始执行...."
}
this.gradle.buildFinished {
    println "构建执行完毕...."
}
this.beforeEvaluate {
    println "android 配置阶段开始执行...."
}
this.afterEvaluate {
    println "android 配置阶段完成执行...."
}

//Gradle Project相关api讲解
//参考：https://coding.imooc.com/lesson/206.html#mid=13287
this.getParentProject()

def getParentProject() {
    println('getParentProject-------------')
    //getSubprojects：获取所有的子Project
    println('parentProject:' + this.getParent().name)
}

this.getMYRootProject()

def getMYRootProject() {
    println('getMYRootProject-------------')
    //getSubprojects：获取所有的子Project
    println('rootProject:' + this.getRootProject().name)
}

//Gradle Project 文件属性相关api
//参考：https://coding.imooc.com/lesson/206.html#mid=13295
//文件路径相关api
println 'the root file path is:' + getRootDir().absolutePath
println 'the build file path is:' + getBuildDir().absolutePath
println 'the project file path is:' + getProjectDir().absolutePath

//文件定位相关api
println getContent('build.gradle')

def getContent(String path) {
    try {
        def file = file(path)    //file()路径相对路径：相对于project的根目录
        return file.text
    } catch (GradleException e) {
        println 'file not fount...'
    }
}
//文件拷贝api copy：复制文件
copy {
    from file('.gitignore')
    into getRootProject().getBuildDir().path + "/copytest/"
}
//fileTree：遍历目录文件
fileTree('build/outputs/apk/') { FileTree fileTree ->
    fileTree.visit { FileTreeElement element ->
        println 'this file name is:' + element.file.name
        copy {
            from element.file
            into getRootProject().getBuildDir().path + "/copytest/"
        }
    }
}

//Gradle执行外部命令
//exec闭包
//参考：https://coding.imooc.com/lesson/206.html#mid=13305
task('apkcopy') {
    doLast {
        def sourcePath = this.buildDir.path + '/outputs/apk'
        def destionPath = '/Users/qitmac0000562/'
        def command = "mv -f ${sourcePath} ${destionPath}"
        exec {
            try {
                executable 'bash'
                args '-c', command
                println 'the command is execute success.'
            } catch (GradleException e) {
                println 'the command is execute faild.'
            }
        }
    }
}

//闭包的参数，可以省略小括号
task apkcopy2 {
    println 'apkcopy2'
}

//Gradle Task定义
//参考：https://coding.imooc.com/lesson/206.html#mid=13286
//1.通过task(name,Closure)创建任务
//Gradle Task执行顺序
//参考：https://coding.imooc.com/lesson/206.html#mid=13288
task helloTask(group: 'test', description: 'test') {
    println 'helloTask'
    doFirst {
        println 'helloTask doFirst1'
    }
    doLast {
        println 'helloTask doLast1'
    }
    doLast {
        println 'helloTask doLast2'
    }
}
helloTask.doFirst {
    println 'helloTask doFirst2'
}

//2.通过taskContain.create()创建任务
this.tasks.create('helloTask1') {
    group('test1')
    description('test1')
    println 'helloTask1'
}

//Gradle Task依赖
//参考：https://coding.imooc.com/lesson/206.html#mid=13291
// taskX务必在依赖Task之前定义，不然会报错如下：
// Could not get unknown property 'taskY' for project ':android' of type org.gradle.api.Project.
task taskX {
    doLast {
        println 'taskX'
    }
}
task taskY {
    doLast {
        println 'taskY'
    }
}

//动态依赖的task也必须在依赖的task之前定义，否则依赖无法生效，也不报错
task lib1 {
    doLast {
        println 'lib1'
    }
}

task nolib {
    doLast {
        println 'nolib'
    }
}

task taskZ(dependsOn: taskX) {
    dependsOn this.tasks.findAll { task ->
        return task.name.startsWith('lib')
    }
    doLast {
        println 'taskZ'
    }
}
taskZ.dependsOn(taskY)

//Gradle Task的输入输出
//参考：https://coding.imooc.com/lesson/206.html#mid=13294
ext {
    versionName = '1.1.0'
    versionCode = '110'
    versionInfo = 'App的第2个版本，上线了一些核心功能'

    destFile = file('release.xml')
    if (destFile != null && !destFile.exists()) {
        destFile.createNewFile()
    }
}

task writeFile {
    //为task指定输入
    inputs.property('versionName', this.versionName)
    inputs.property('versionCode', this.versionCode)
    inputs.property('versionInfo', this.versionInfo)
    //为task指定输出
    outputs.file this.destFile
    doLast {
        def data = inputs.getProperties()
        File file = outputs.getFiles().getSingleFile()
        //将map转化为实体对象
        def versionMsg = new VersionMsg(data)
        //将实体对象转换为xmo数据
        def sw = new StringWriter()
        def xmlBuilder = new MarkupBuilder(sw)
        if (file.text != null && file.text.size() <= 0) {
            //如果文件没有内容
            xmlBuilder.releases {
                release {
                    versionCode(versionMsg.versionCode)
                    versionName(versionMsg.versionName)
                    versionInfo(versionMsg.versionInfo)
                }
            }
            file.withWriter { writer -> writer.append(sw.toString()) }
        } else {
            //已经有版本信息
            xmlBuilder.releases {
                release {
                    versionCode(versionMsg.versionCode)
                    versionName(versionMsg.versionName)
                    versionInfo(versionMsg.versionInfo)
                }
            }
            def lines = file.readLines()
            def lengths = lines.size() - 1
            file.withWriter { writer ->
                lines.eachWithIndex { String line, int index ->
                    if (index != lengths) {
                        //如果不是最后一行，写文件
                        writer.append(line + '\r\n')
                    } else {
                        //如果是最后一行，插入新数据，并写入文件默认
                        writer.append(sw.toString() + '\r\n')
                        writer.append(lines.get(lengths))
                    }
                }
            }
        }
    }
}

class VersionMsg {
    String versionName;
    String versionCode
    String versionInfo
}

task readFile {
    //通过readFile的input.file和writeFile的output.File关联，产生了依赖关系
    inputs.file destFile
    doLast {
        def file = inputs.files.singleFile
        println file.text
    }
}

task testTask {
    dependsOn writeFile, readFile
    doLast {
        println '输入输出任务结束'
    }
}

//Gradle依赖API mustRunAfter和shouldRunAfter
//参考：https://coding.imooc.com/lesson/206.html#mid=13296
task TaskD {
    doLast {
        println 'TaskD'
    }
}

task TaskE {
    mustRunAfter TaskD
    doLast {
        println 'TaskE'
    }
}

task TaskF {
    mustRunAfter TaskE
    doLast {
        println 'TaskF'
    }
}

//Gradle将自定义Task挂接到构建生命周期过程中
//参考：https://coding.imooc.com/lesson/206.html#mid=13296
this.project.afterEvaluate { project ->
    def cleanTask = project.tasks.getByName('clean')
    if (cleanTask == null) {
        throw GradleException('ths build task is not found')
    }

    cleanTask.dependsOn TaskF
    cleanTask.doLast {
        //FIXME 实际测试没有execute()方法，包版本废弃？
        //参考：https://stackoverflow.com/questions/50020011/how-to-call-gradle-task-execution-from-outside-task
//        TaskF.execute()
    }
}




