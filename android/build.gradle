apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'

//应用ASM的插件
apply plugin: 'com.android.xknowledge2'

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

final def log = project.logger
final def variants = project.android.applicationVariants

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.9'
        classpath 'org.aspectj:aspectjweaver:1.8.9'
    }
}
repositories {
    mavenCentral()
}

variants.all {
        //正式环境要删除掉这一句
    variant ->
        if (!variant.buildType.isDebuggable()) {
            log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
            return;
        }

        JavaCompile javaCompile = variant.javaCompile
        javaCompile.doLast {
            String[] args = ["-showWeaveInfo",
                             "-1.8",
                             "-inpath", javaCompile.destinationDir.toString(),
                             "-aspectpath", javaCompile.classpath.asPath,
                             "-d", javaCompile.destinationDir.toString(),
                             "-classpath", javaCompile.classpath.asPath,
                             "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
            log.debug "ajc args: " + Arrays.toString(args)

            MessageHandler handler = new MessageHandler(true);
            new Main().run(args, handler);
            for (IMessage message : handler.getMessages(null, true)) {
                switch (message.getKind()) {
                    case IMessage.ABORT:
                    case IMessage.ERROR:
                    case IMessage.FAIL:
                        log.error message.message, message.thrown
                        break;
                    case IMessage.WARNING:
                        log.warn message.message, message.thrown
                        break;
                    case IMessage.INFO:
                        log.info message.message, message.thrown
                        break;
                    case IMessage.DEBUG:
                        log.debug message.message, message.thrown
                        break;
                }
            }
        }
}

android {
    compileSdkVersion COMPILE_SDK_VERSION.toInteger()
    defaultConfig {
        applicationId "com.android.xknowledge"
        minSdkVersion MIN_SDK_VERSION.toInteger()
        targetSdkVersion TARGET_SDK_VERSION.toInteger()
        versionCode VERSION_CODE.toInteger()
        versionName VERSION_NAME
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target 1.6
    //参考：https://stackoverflow.com/questions/56748334/how-to-get-viewmodel-by-viewmodels-fragment-ktx
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    //Robolectric框架构建配置
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    //ndk构建文件配置
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version "3.10.2"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.appcompat:appcompat:1.2.0-alpha02'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.0.0-rc01'

    implementation 'org.greenrobot:eventbus:3.1.1'
    //Fresco框架
    implementation 'com.facebook.fresco:fresco:2.0.0'
    implementation 'com.facebook.fresco:animated-gif:2.0.0'
    implementation 'com.facebook.fresco:animated-webp:2.0.0'
    //Viewmodel相关
    implementation 'androidx.activity:activity-ktx:1.1.0'
    implementation 'androidx.fragment:fragment-ktx:1.2.0'
    //Paging相关
    implementation 'androidx.paging:paging-runtime:2.1.0'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'androidx.room:room-runtime:2.2.3'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'androidx.paging:paging-runtime-ktx:2.1.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation project(path: ':router')
    annotationProcessor project(path: ':annotation_compiler')
    implementation project(path: ':annotation')
    if (!IS_APPLICATION.toBoolean()) {
        implementation project(path: ':module1_apk')
        implementation project(path: ':module2_apk')
    }
    kapt 'com.github.bumptech.glide:compiler:4.9.0'
    //Navigation
    implementation 'androidx.navigation:navigation-fragment:2.2.1'
    implementation 'androidx.navigation:navigation-ui:2.2.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.1'
    //rxbinding
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation "io.reactivex.rxjava2:rxjava:2.2.10"
    implementation "com.jakewharton.rxbinding2:rxbinding:2.0.0"
    implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:2.0.0"
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.5@aar'

    implementation 'org.aspectj:aspectjrt:1.8.9'
    implementation project(':reactnative')
    implementation project(path: ':plugin_core')
    annotationProcessor 'androidx.room:room-compiler:2.2.3'
    kapt 'org.greenrobot:eventbus-annotation-processor:3.1.1'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2-alpha02'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha02'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0-alpha02'

    //Robolectric框架构建配置
    testImplementation 'org.robolectric:robolectric:4.3'

    //leakcanary相关
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'
}

kapt {
    arguments {
        arg('eventBusIndex', 'com.android.xknowledge.MyEventBusIndex')
    }
}

apply from: 'customplugin1.gradle'
// 引入buildSrc里的自定义插件
apply plugin: 'com.android.xknowledge'
// 引入comtomplugin3独立项目自定义插件
apply plugin: 'com.android.xknowledge1'

//gradle生命周期的监听
//参考：https://coding.imooc.com/lesson/206.html#mid=13281
println "android 配置阶段执行中...."

//在项目的build.gradle中调用this.gradle，调用的是Project对象的getGradle()方法
this.gradle.buildStarted {
    println "构建开始执行...."
}
this.gradle.buildFinished {
    println "构建执行完毕...."
}
this.beforeEvaluate {
    println "android 配置阶段开始执行...."
}
this.afterEvaluate {
    println "android 配置阶段完成执行...."
}