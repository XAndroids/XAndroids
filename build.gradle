// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext{
        kotlin_version = '1.3.31'
        navigationVersion = '2.1.0'
    }
    repositories {
        google()
        jcenter()

        //引入本地仓库，CustomPlugin33等
        maven {
            url 'repo'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$navigationVersion"
        classpath 'com.android.xknowledge1:CustomPlugin33:1.0.0'
        classpath 'com.android.xknowledge2:asmplugin:0.0.1'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

//为当前根project和所有子project进行配置
allprojects {
    repositories {
        google()
        jcenter()
        maven {
            // All of React Native (JS, Android binaries) is installed from npm
            url "$rootDir/reactnative/node_modules/react-native/android"
        }

        maven {
            // Android JSC is installed from npm
            url("$rootDir/reactnative/node_modules/jsc-android/dist")
        }
    }
}

//为当前根project的子project进行配置
subprojects {

}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//Gradle的生命周期监听
//参考：https://coding.imooc.com/lesson/206.html#mid=13281
this.gradle.projectsLoaded {
    println "初始化阶段完成执行...."
}
//在项目的build.gradle中调用this.gradle，调用的是Project对象的getGradle()方法
this.gradle.projectsEvaluated {
    println "所有项目buiild.gradle执行完成...."
}
this.gradle.taskGraph.whenReady {
    println "Task依赖关系图建立完毕...."
}
this.gradle.taskGraph.beforeTask {
    println "开始执行某个Task...."
}
this.gradle.taskGraph.afterTask {
    println "某个Task执行完毕...."
}
this.gradle.beforeProject {
    println "开始配置某个Project...."
}
this.gradle.afterProject {
    println "某个Project配置完毕...."
}

//Gradle Project相关api讲解
//参考：https://coding.imooc.com/lesson/206.html#mid=13287
this.getProjects()
def getProjects() {
    println('getAllprojects-------------')
    //getAllprojects：获取所有的Project
    this.getAllprojects().eachWithIndex { Project project, int index ->
        if (index == 0) {
            println('Root Projet:' + project.name)
        } else {
            println('child Projet:' + project.name)
        }
    }
}

this.getAllSubProjects()
def getAllSubProjects() {
    println('getAllSubProjects-------------')
    //getSubprojects：获取所有的子Project
    this.getSubprojects().eachWithIndex { Project project, int index ->
        println('child Projet:' + project.name)
    }
}

//project()方法，获取指定名称的project，并传递闭包进行配置
//可以在任意位置，对指定名称的project进行配置
//但一般不这么做，在每个project进行独立的配置
project('android') { Project project ->
    println(project.name);
    apply plugin: 'com.android.application'

    dependencies {
        //Fresco框架
        implementation 'com.facebook.fresco:fresco:2.0.0'
        implementation 'com.facebook.fresco:animated-gif:2.0.0'
        implementation 'com.facebook.fresco:animated-webp:2.0.0'
    }
}
